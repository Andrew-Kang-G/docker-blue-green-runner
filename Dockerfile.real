FROM php:7.3-fpm-buster as backend-build

RUN apt-get update -qqy && \
    apt-get install -qqy --force-yes \
        curl runit wget unzip vim lsof \
        git \
        redis-server \
        # Install apache
        libzbar0 \
        poppler-utils \
        #openjdk-8-jdk \
        libwebp-dev libjpeg62-turbo-dev libpng-dev libxpm-dev \
        libmagickwand-dev  \
        ghostscript-x \
        zlib1g-dev \
        libzip-dev \
        zip && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

RUN pecl install imagick

RUN docker-php-ext-enable imagick && docker-php-ext-install mbstring && docker-php-ext-install zip && \
    docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ && \
    docker-php-ext-install gd && \
    docker-php-ext-configure pdo_mysql && docker-php-ext-install pdo_mysql

RUN cp /etc/ImageMagick-6/policy.xml /etc/ImageMagick-6/policy.xml.bak \
    && sed -i "s/rights\=\"none\" pattern\=\"PS\"/rights\=\"read\|write\" pattern\=\"PS\"/" /etc/ImageMagick-6/policy.xml \
    && sed -i "s/rights\=\"none\" pattern\=\"EPI\"/rights\=\"read\|write\" pattern\=\"EPI\"/" /etc/ImageMagick-6/policy.xml \
    && sed -i "s/rights\=\"none\" pattern\=\"PDF\"/rights\=\"read\|write\" pattern\=\"PDF\"/" /etc/ImageMagick-6/policy.xml \
    && sed -i "s/rights\=\"none\" pattern\=\"XPS\"/rights\=\"read\|write\" pattern\=\"XPS\"/" /etc/ImageMagick-6/policy.xml


RUN curl -s https://getcomposer.org/installer | php \
    && mv composer.phar /usr/local/bin/composer \
    && composer self-update 1.6.5

ARG DISABLE_CACHE

COPY ./ /var/www/html/rpa-bpo-dashboard
WORKDIR /var/www/html/rpa-bpo-dashboard
RUN composer install --prefer-dist --optimize-autoloader --no-interaction


FROM php:7.3-fpm-buster as production

MAINTAINER Platform Team in Akuodigital

ARG server
# ARG project
ARG ssh_prv_key
ARG ssh_pub_key

ENV DEBIAN_FRONTEND=noninteractive

# 1. Base Libraries
#RUN apt-get update -qqy && apt-get upgrade -qqy && \
 #   apt-get install -yq --no-install-recommends software-properties-common curl runit wget unzip vim && \
  #  add-apt-repository 'deb http://security.debian.org/debian-security stretch/updates main'
#RUN locale-gen en_US.UTF-8 && export LANG=en_US.UTF-8
RUN curl -sL https://deb.nodesource.com/setup_10.x | bash - && \
    apt-get update -qqy && \
    apt-get install -qqy --force-yes \
        nodejs \
        curl runit wget unzip vim \
        redis-server \
        supervisor \
        # Install git
        git \
        # Install apache
        apache2 \
        libwebp-dev libjpeg62-turbo-dev libpng-dev libxpm-dev \
        libmagickwand-dev  \
        ghostscript-x \
        zlib1g-dev \
        libzip-dev \
        cron \
        zip && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Web Server - Apache2
RUN \cp /usr/local/etc/php/php.ini-production  /usr/local/etc/php/php.ini \
&& rm /etc/apache2/sites-available/000-default.conf \
&& rm /etc/apache2/sites-enabled/000-default.conf \
&& a2enmod proxy \
&& a2enmod proxy_http \
&& a2enmod proxy_wstunnel \
&& a2enmod ssl \
&& a2enmod proxy_fcgi \
&& a2enmod rewrite \
&& a2enmod headers \
# [반드시 로컬 개발 환경 도커에서만 사용] 공유 볼륨 UID, GID, 1000을 www-data (Apache2 사용자)로 지정하여 공유 볼륨의 파일 쓰기 퍼미션 오류 방지
&& usermod -u 1000 www-data && groupmod -g 1000 www-data

RUN pecl install imagick

RUN docker-php-ext-enable imagick && docker-php-ext-install mbstring && docker-php-ext-install zip && \
    docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ && \
    docker-php-ext-install gd && \
    docker-php-ext-configure pdo_mysql && docker-php-ext-install pdo_mysql

RUN sed -i -E "s/(post_max_size\s*=\s*)[^\n\r]+/\1100M/" /usr/local/etc/php/php.ini \
    && sed -i -E "s/(upload_max_filesize\s*=\s*)[^\n\r]+/\1100M/" /usr/local/etc/php/php.ini \
        # memory_limit 늘리기
    && sed -i -E "s/(memory_limit\s*=\s*)[^\n\r]+/\11024M/" /usr/local/etc/php/php.ini

RUN npm install laravel-echo-server@1.6.0 -g

ARG DISABLE_CACHE

# 실서버는 로컬에서 개발할 때와 다르게, 속도 향상을 위해 루트 폴더를 동기화 하기 않는다.
COPY --from=backend-build /var/www/html/rpa-bpo-dashboard/ /var/www/html/rpa-bpo-dashboard
# websocket-server.conf command 참조
WORKDIR /var/www/html/rpa-bpo-dashboard
RUN npm install && npm run real-production

WORKDIR /var/www/html/rpa-bpo-dashboard

# sudo chown -R /var/www/html/rpa-bpo-dashboard 가 몇 분씩 걸려서 취한 조치
# 이 방식은 RUN chown 보다 빠르긴 하지만, vendor 폴더와 node_modules 폴더의 권한을 바꿔주지 않는다.
# 한 가지 주의할 점은 .docker/etc/supervisor/websocket-server.conf 의 user와 node_modules 폴더의 권한이 다르다면, websocket 작동에 실패한다.
# Group 의 경우 Host root 의 권한을 주기 때문에, run.sh 에 확인해 보면
COPY --chown=www-data ./ /var/www/html/rpa-bpo-dashboard/
RUN chown -R redis /var/log/redis


# public link 에 저장되는 이미지 삭제 크론 작업
RUN echo "* * * * * /usr/local/bin/php /var/www/html/rpa-bpo-dashboard/artisan schedule:run >> /dev/null 2>&1" >> /etc/cron.d/cronjob

# Configuration Files injected into Container
COPY ./.docker/etc/apache2/apache2.conf /etc/apache2/apache2.conf
COPY ./.docker/etc/apache2/sites-available/rpabpo.conf /etc/apache2/sites-available/rpabpo.conf
COPY ./.docker/etc/apache2/sites-available/ssl-substr /etc/apache2/sites-available/ssl-substr
#COPY ./.docker/etc/apache2/conf-enabled/security.conf /etc/apache2/conf-enabled/security.conf
#COPY ./.docker/php-fpm/www.conf /usr/local/etc/php-fpm.d/www.conf
COPY ./.docker/etc/sysctl.conf /etc/sysctl.conf

COPY ./.docker/etc/logrotate.d/ /etc/logrotate.d/
COPY ./.docker/etc/supervisor/websocket-server.conf /etc/supervisor/conf.d/websocket-server.conf
COPY ./.docker/etc/supervisor/laravel-worker.conf /etc/supervisor/conf.d/laravel-worker.conf

COPY ./.docker/etc/logrotate.d/* /etc/logrotate.d/

COPY ./.docker/ssl/ /etc/apache2/ssl/
COPY ./.docker/oauth2-key/ /var/www/html/rpa-bpo-dashboard/storage/

COPY ./.docker/laravel-echo-server/ /laravel-echo-server
COPY ./.docker/sh/update/$server/rpa-bpo-dashboard.sh /rpa-bpo-dashboard.sh

WORKDIR /var/www/html/rpa-bpo-dashboard
RUN chmod a+x /var/www/html/rpa-bpo-dashboard/*.sh

ENTRYPOINT bash /rpa-bpo-dashboard.sh && /bin/bash